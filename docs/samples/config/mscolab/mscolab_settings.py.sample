# -*- coding: utf-8 -*-
"""

    mslib.mscolab.conf.py.example
    ~~~~~~~~~~~~~~~~~~~~

    config for mscolab.

    This file is part of mss.

    :copyright: Copyright 2019 Shivashis Padhi
    :copyright: Copyright 2019-2024 by the MSS team, see AUTHORS.
    :license: APACHE-2.0, see LICENSE for details.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
import os

# In the unit days when Operations get archived because not used
ARCHIVE_THRESHOLD = 30

# To enable logging set to True or pass a logger object to use.
SOCKETIO_LOGGER = False

# To enable Engine.IO logging set to True or pass a logger object to use.
ENGINEIO_LOGGER = False

# Set which origins are allowed to communicate with your server
CORS_ORIGINS = ["*"]

# Set base directory where you want to save Mscolab data
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

# Directory in which all data related to Mscolab is stored
DATA_DIR = os.path.join(BASE_DIR, "colabdata")

# Where mscolab project files are stored on the server
MSCOLAB_DATA_DIR = os.path.join(DATA_DIR, 'filedata')

# Directory where uploaded images and documents in the chat are stored
UPLOAD_FOLDER = os.path.join(DATA_DIR, 'uploads')

# Max image/document upload size in mscolab chat (default 2MB)
MAX_UPLOAD_SIZE = 2 * 1024 * 1024

# Set your secret key for token generation
SECRET_KEY = 'MySecretKey'

# looks for a given category for an operation ending with GROUP_POSTFIX
# e.g. category = Tex will look for TexGroup
# all users in that Group are set to the operations of that category
# having the roles in the TexGroup
GROUP_POSTFIX = "Group"

# Set the database connection string:
# Examples for different DBMS:
# MySQL: "mysql+pymysql://<username>:<password>@<host>/<db_name>?charset=utf8mb4"
# PostgreSQL: "postgresql://<username>:<password>@<host>/<db_name>"
# SQLite: "sqlite:///<path_to_db>"
SQLALCHEMY_DB_URI = 'sqlite:///' + os.path.join(DATA_DIR, 'mscolab.db')

# Set to True for testing and False for production
SQLALCHEMY_ECHO = False

enable_basic_http_authentication = False

# text to be written in new mscolab based ftml files.
STUB_CODE = """<?xml version="1.0" encoding="utf-8"?>
<FlightTrack version="1.7.6">
  <ListOfWaypoints>
    <Waypoint flightlevel="250" lat="67.821" location="Kiruna" lon="20.336">
      <Comments></Comments>
    </Waypoint>
    <Waypoint flightlevel="250" lat="78.928" location="Ny-Alesund" lon="11.986">
      <Comments></Comments>
    </Waypoint>
  </ListOfWaypoints>
</FlightTrack>
"""

# accounts on a database on the server
DIRECT_LOGIN = True

# enable login by identity provider
USE_SAML2 = False

# looks for a given category forn a operation ending with GROUP_POSTFIX
# e.g. category = Tex will look for TexGroup
# all users in that Group are set to the operations of that category
# having the roles in the TexGroup
GROUP_POSTFIX = "Group"

# Enable SSL certificate verification during SSO between MSColab and IdP
ENABLE_SSO_SSL_CERT_VERIFICATION = True

# dir where mscolab single sign process files are stored
MSCOLAB_SSO_DIR = os.path.join(DATA_DIR, 'datasso')
